#!/usr/bin/env bash

# set -x

## PURPOSE: wrapper for dig so it 'just works'
## - based on BUGS section of dig manpage :
## "There are probably too many query options."
## - returns a concise result, for easy inclusion into working code

## REF: https://github.com/isc-projects/bind9
## REF: https://en.wikipedia.org/wiki/Dig_(command)
## REF: https://en.wikipedia.org/wiki/Dig_Dug

## Examples:
## dug myhostname # simple name lookup
## dug 127.0.0.1  # simple address lookup
## dug $(dug myhostname) # reverse lookup from the resolved address
## TYPE=MX dug smtp.my.domain # lookup MX record
 
( which dig &>/dev/null ) || { echo "ERROR: dig package is required"; exit 1; }

INPUT=$1

INPUT=${INPUT:?-ERROR: IP address or hostname is required}

## determine if IP address
## REF: https://www.linuxjournal.com/content/validating-ip-address-bash-script

valid_ip4 ()
{
    local  ip=${INPUT}
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

: ADDRESS
unset ADDRESS
valid_ip4 && ADDRESS="${INPUT}"

[ -z $ADDRESS ] || { dig +short -r -x $ADDRESS; exit $?; }

## TODO:
## - if not valid IP4
## - validate as IP6
## - validate as hostname

valid_name () {
	getent hosts $NAME
}

: NAME
NAME="${INPUT}"

DNS_RECORD_TYPE=${TYPE}  ## eg: TYPE=MX dug host
TYPE=${DNS_RECORD_TYPE:-A}

#valid_name && 
[ -z $NAME ] || { dig +short -t ${TYPE} ${NAME}; exit $?; }

